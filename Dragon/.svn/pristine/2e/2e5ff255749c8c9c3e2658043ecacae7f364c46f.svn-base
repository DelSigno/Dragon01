package com.dragon.android.framework;

import static android.opengl.GLES20.glViewport;
import static android.opengl.Matrix.orthoM;

import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.opengles.GL10;

import com.dragon.android.CATSMainMenuRenderer;
import com.dragon.android.CircleAvoidTheSquaresRenderer;
import com.dragon.android.data.Vec2;
import com.dragon.android.hud.Text;

import android.app.Activity;
import android.app.ActivityManager;
import android.content.Context;
import android.content.pm.ConfigurationInfo;
import android.opengl.GLSurfaceView;
import android.opengl.GLSurfaceView.Renderer;
import android.os.Build;
import android.os.Bundle;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.widget.Toast;

public abstract class Game extends Activity implements Renderer, Hearer {

	//SURFACE and RENDERERS
	private GLSurfaceView glSurfaceView;
	private boolean rendererSet = false;
	
	//INPUTLISTENERANDSHIT
	private InputListener inputListener;
	private final int maxPointers;
	
	//SCREEN
	private float screenLeft;
	private float screenRight;
	private float screenBottom;
	private float screenTop;
	
	//MATRICIES
	private float[] modelMatrix = new float[16]; //Used for translations
	private final float[] projectionMatrix = new float[16]; //Stores the proverbial camera
	private float[] translationMatrix = new float[16]; //Used for translations...again
	private float[] modelViewProjectionMatrix = new float[16]; //used to store result of camera after translation
		
	
	
	//************************Main Code Begins*********************************
	public Game(int maxPointers){
		this.maxPointers = maxPointers;
		this.inputListener = new InputListener(maxPointers,this);
	}
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		
		
		glSurfaceView = new GLSurfaceView(this);
		
		//Gets device of emulator info and sets up check to ensure
		//OpenGL2.0 Compatible
		final ActivityManager activityManager = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);
		final ConfigurationInfo configurationInfo = activityManager.getDeviceConfigurationInfo();	
		final boolean supportsEs2 = configurationInfo.reqGlEsVersion >= 0x20000 
				|| (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1
				&& (Build.FINGERPRINT.startsWith("generic")
				|| Build.FINGERPRINT.startsWith("unknown")
				|| Build.MODEL.contains("google_sdk")
				|| Build.MODEL.contains("Emulator")
				|| Build.MODEL.contains("Android SDK built for x86")));
		
		
		if (supportsEs2) {
			// Request an OpenGL ES 2.0 compatible context.
			glSurfaceView.setEGLContextClientVersion(2);
			// Assign our renderer.
			glSurfaceView.setRenderer(this);
			rendererSet = true;
		} else {
			Toast.makeText(this, "This device does not support OpenGL ES 2.0.",
			Toast.LENGTH_LONG).show();
			return;
		}
		
		//+++Sends touch commands to the glSurfaceView
		glSurfaceView.setOnTouchListener(inputListener);
			
		//---Finish sending in touch commands to glSurfaceView
		
		setContentView(glSurfaceView);
	}
	
	@Override
	public void onSurfaceChanged(GL10 unused, int width, int height) {
		//Sets the transformation from normalized openGL coordinates to the render window coordinates
		//glViewport(left,bottom,right,top)
		glViewport(0, 0, width, height);
		
		
		//specifies the aspect ratio
		//orthoM(matrix, offset, min-x, max-x, min-y, max-y, min-z, max-z)
		final float aspectRatio = (float) height / (float) width;
		
		screenLeft = -1f;
		screenRight = 1f;
		screenBottom = -aspectRatio;
		screenTop = aspectRatio;	
		orthoM(projectionMatrix, 0, screenLeft, screenRight, screenBottom, screenTop, -1f, 1f);

		

		
		
		
								   
	}

}
