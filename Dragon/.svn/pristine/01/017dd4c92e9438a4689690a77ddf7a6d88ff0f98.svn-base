package com.dragon.android;

import static android.opengl.GLES20.GL_COLOR_BUFFER_BIT;
import static android.opengl.GLES20.glClear;
import static android.opengl.GLES20.glClearColor;
import static android.opengl.GLES20.glViewport;
import static android.opengl.Matrix.multiplyMM;
import static android.opengl.Matrix.orthoM;
import static android.opengl.Matrix.setIdentityM;
import static android.opengl.Matrix.translateM;

import java.util.Arrays;

import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.opengles.GL10;

import com.dragon.android.R;
import com.dragon.android.data.Vec2;
import com.dragon.android.hud.NumberBox;
import com.dragon.android.hud.Text;
import com.dragon.android.programs.ColorShader2DProgram;
import com.dragon.android.programs.TextureShader2DProgram;
import com.dragon.android.util.Font;
import com.dragon.android.util.Logger;
import com.dragon.android.util.TextureHandler;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.opengl.GLSurfaceView.Renderer;

public class CATSMainMenuRenderer implements Renderer{

	private static String TAG = "CATSMainMenuRenderer";
	
	//SCREEN DIMENSION
	private float screenLeft;
	private float screenRight;
	private float screenBottom;
	private float screenTop;
	
	//MATRICIES
	private float[] modelMatrix = new float[16]; //Used for translations
	private final float[] projectionMatrix = new float[16]; //Stores the proverbial camera
	private float[] translationMatrix = new float[16]; //Used for translations...again
	private float[] modelViewProjectionMatrix = new float[16]; //used to store result of camera after translation
	
	//CONTEXT
	Context context;
	
	
	//PREFERENCES
	private SharedPreferences preferences;
	private SharedPreferences.Editor prefEditor;
	
	//TEXTS
	
	private Text titleText;
	
	//PROGRAMS
	private ColorShader2DProgram colorShaderProgram;
	private TextureShader2DProgram textureShaderProgram;
	
	//TEXTURELOCATION
	private int iReallyDoFeelBadAboutThisLocation;
	
	
	//***********************DECLARTIONS OVER********************************
	
	public CATSMainMenuRenderer(Context context){
		this.context = context;
		this.preferences = context.getSharedPreferences("cats",Context.MODE_PRIVATE);
		prefEditor = preferences.edit();
	}
	
	@Override
	public void onDrawFrame(GL10 arg0) {
		// Clear the rendering surface.
		glClear(GL_COLOR_BUFFER_BIT);
		
		textureShaderProgram.useProgram();
		titleText.bindData(textureShaderProgram);
		positionObject(titleText.getPosition().getX(),titleText.getPosition().getY(),0);		
		textureShaderProgram.setUniforms(modelViewProjectionMatrix, iReallyDoFeelBadAboutThisLocation);
		titleText.draw();
		
		
		
		
	}

	
	private void positionObject(float x, float y, float z) {

		//translationMatrix = projectionMatrix;
		//translateM(translationMatrix, 0, x, y, z);
		setIdentityM(modelMatrix, 0);
		translateM(modelMatrix, 0, x, y, z);
		multiplyMM(modelViewProjectionMatrix, 0, projectionMatrix, 0, modelMatrix, 0);
	
	}
	
	
	@Override
	public void onSurfaceChanged(GL10 unused, int width, int height) {
		//Sets the transformation from normalized openGL coordinates to the render window coordinates
		//glViewport(left,bottom,right,top)
		glViewport(0, 0, width, height);
		
		
		//specifies the aspect ratio
		//orthoM(matrix, offset, min-x, max-x, min-y, max-y, min-z, max-z)
		final float aspectRatio = (float) height / (float) width;
		
		screenLeft = -1f;
		screenRight = 1f;
		screenBottom = -aspectRatio;
		screenTop = aspectRatio;
		
		orthoM(projectionMatrix, 0, screenLeft, screenRight, screenBottom, screenTop, -1f, 1f);
		
		//Logger.loggerDebug(TAG, Arrays.toString(projectionMatrix));
		
		titleText = new Text(new Vec2(1.0f,0.0f), "Circle_Avoid_The_Square_5", new Vec2(2.0f,0.25f));
		
		
		
								   
	}
		
	

	@Override
	public void onSurfaceCreated(GL10 arg0, EGLConfig arg1) {
		
		//Sets background color to gray
		glClearColor(0.1f, 0.1f, 0.1f, 1.0f);
		
		textureShaderProgram = new TextureShader2DProgram(context,true);
		
		iReallyDoFeelBadAboutThisLocation = TextureHandler.loadTexture(context, R.drawable.font01);
		TextureHandler.setBlockySettings(iReallyDoFeelBadAboutThisLocation);
		
	}

	
	
	public void handleTouchPress(float normalizedX, float normalizedY) {

        try {
			Intent intent = new Intent(context, Class.forName("com.circleavoidthesquares.android.CircleAvoidTheSquaresActivity"));
			context.startActivity(intent);
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
		
	}

	public void handleTouchDrag(float normalizedX, float normalizedY) {
		// TODO Auto-generated method stub
		
	}

}
