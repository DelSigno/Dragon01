package com.dragon.android.objects;

import static android.opengl.GLES20.GL_TRIANGLES;
import static android.opengl.GLES20.GL_UNSIGNED_SHORT;
import static android.opengl.GLES20.glDrawElements;

import java.util.ArrayList;
import java.util.LinkedList;

import android.content.Context;

import com.dragon.android.R;
import com.dragon.android.data.IndiceArray;
import com.dragon.android.data.Vec2;
import com.dragon.android.data.VertexArray;
import com.dragon.android.framework.OrthoCamera;
import com.dragon.android.objects.geometry.Square;
import com.dragon.android.programs.TextureShader2DProgram;
import com.dragon.android.util.Logger;
import com.dragon.android.util.TextureHandler;
import com.dragon.android.util.TextureMapVertexCreator;

public class ExpandingDragon implements DrawCollection {
	
	//CONSTANTS
	private static final String TAG = "ExpandingDragon";
	private static final long ANIMATION_SPEED = 30; //in milliseconds
	private static final float BODY_NODE_SIZE = .25f;
	private static final long RESPAWN_TIME =  (long) ((DragonHead.SPEED /BODY_NODE_SIZE) * 3000);
	private static final int BYTES_PER_FLOAT = 4;
	private static final int BYTES_PER_INT = 4;
	private static final int TRIS_COUNT = 2;
	private static final int POSITION_COMPONENT_COUNT = 2;
	private static final int TEXTURE_COMPONENT_COUNT = 2; 
	
	//VARIABLES
	private int totalNodes = 5;
	private LinkedList<BodyNode> bodyNodes = new LinkedList<BodyNode>();
	private DragonHead head;
	private TextureShader2DProgram program;
	private MercTimer newNodeDecider = new MercTimer(0, RESPAWN_TIME);
	private Vec2 oldHeadPos = null;
	private Vec2 nowHeadPos = null;
	
	//VERTEXSHIT
	private VertexArray vertexArray;
	private VertexArray textureVertexArray;
	private IndiceArray indiceArray;
	
	//TEXURE
	private int texture;
	
	//CAMERA
	private OrthoCamera camera;
	
	
	//************CODE*************************
	public ExpandingDragon(Context context, TextureShader2DProgram program){
		this.head = new DragonHead(context, program);
		this.program = program;
		
		this.vertexArray = TextureMapVertexCreator.getHomeSquare(4,new Square(BODY_NODE_SIZE).getData());
		this.vertexArray.bindToBuffer();
		
		this.textureVertexArray = TextureMapVertexCreator.createTextureVertexArray(4, 3);
		this.textureVertexArray.bindToBuffer();
		
		this.indiceArray = TextureMapVertexCreator.getHomeSqareIndices((short)4);
		this.indiceArray.bindToBuffer();
		
		this.texture = TextureHandler.loadTexture(context, R.drawable.dragon_body);
		
		
	}
	
	private void updateBody(){
		
		if (oldHeadPos == null){
			oldHeadPos = head.getPosition();
			newNodeDecider.pollTimer();
		} else {		
			
			if (newNodeDecider.pollTimer()) {
				
				if (bodyNodes.size() == totalNodes){

					bodyNodes.add(new BodyNode(oldHeadPos));
					bodyNodes.removeFirst();
					oldHeadPos = new Vec2(head.getPosition());
					
				}else if ((bodyNodes.size() < totalNodes)) {
					
					bodyNodes.add(new BodyNode(oldHeadPos));
					oldHeadPos = new Vec2(head.getPosition());
					
				}
			}
			
			
		}
		
		
		
		
	}
	
 	public boolean setTargeting(boolean nTarg){
		return head.setTargeting(nTarg);
		
	}
	
	public void setTarget(Vec2 nTarg){
		//Logger.loggerDebug(TAG, "We send this to target -> " + nTarg);

		head.setTarget(nTarg);
	}
	
	@Override
	public void draw() {
		updateBody();
		textureVertexArray.quickBind();
		//Logger.loggerDebug(TAG,"begining draw nodes, count = " + bodyNodes.size());
		for(BodyNode bNode : bodyNodes){
			bNode.draw();
		}
		
		

	}

	public void expand(){
		
	}
	@Override
	public void bindData(OrthoCamera camera) {
		
		this.camera = camera;
		
		//we just stick head hear because noone cares
		head.bindData(camera);
		head.draw();
		
		program.useProgram();
		
		vertexArray.setActiveVBO(program.getPositionCoordinatesAttributeLocation(), TRIS_COUNT, POSITION_COMPONENT_COUNT * BYTES_PER_FLOAT, 0);
		
		indiceArray.setActiveIBO();
		

		
		program.setTextureId(texture);
		
		
		
		
	}
	
	public class BodyNode implements Drawable {
		private Vec2 position;
		private MercTimer mTimer = new MercTimer(12,ANIMATION_SPEED);
		
		public BodyNode(Vec2 iPos){
			this.position = iPos;
		}
		
		public Vec2 getPos(){
			return position;
		}
		@Override
		public void draw() {
			//Logger.loggerDebug(TAG, "Drawing a bodyNode at: " + this.position.log());
			program.setuMatrix(camera.srtToObject2D(1, 1, 1, 0, this.position.getX(), this.position.getY(), 0));
			textureVertexArray.attribPointer(program.getTextureCoordinatesAttributeLocation(), TRIS_COUNT, TEXTURE_COMPONENT_COUNT * BYTES_PER_FLOAT, mTimer.getNewOffset(4) * (POSITION_COMPONENT_COUNT * BYTES_PER_FLOAT));
			glDrawElements(GL_TRIANGLES,TRIS_COUNT * 3,GL_UNSIGNED_SHORT, 0);
		}
		
	}

}
