package com.dragon.android.objects;


import static android.opengl.GLES20.GL_TRIANGLES;
import static android.opengl.GLES20.GL_UNSIGNED_SHORT;
import static android.opengl.GLES20.glDrawElements;
import android.content.Context;

import com.dragon.android.R;
import com.dragon.android.data.IndiceArray;
import com.dragon.android.data.Vec2;
import com.dragon.android.data.VertexArray;
import com.dragon.android.framework.OrthoCamera;
import com.dragon.android.objects.geometry.Square;
import com.dragon.android.programs.TextureShader2DProgram;
import com.dragon.android.util.TextureHandler;
import com.dragon.android.util.TextureMapVertexCreator;

public class DragonHead implements DrawCollection {
	
	//PROPERTIES
	private float direction = 0.0f;
	private Vec2 position = new Vec2(0,0);
	
	//STATICS
	private static final float SIZE = 0.5f;
	private static final long ANIMATION_SPEED = 250; //in miliseconds
	private static final float SPEED = 1.0f;
	private static final float TURN_SPEED = 0.05f;
	private static final int BYTES_PER_FLOAT = 4;
	private static final int BYTES_PER_INT = 4;
	private static final int TRIS_COUNT = 2;
	private static final int POSITION_COMPONENT_COUNT = 2;
	private static final int TEXTURE_COMPONENT_COUNT = 2;
	
	//MOVEMENT
	private boolean targeting = false;
	private Vec2 target = new Vec2(0,0);
	
	//CAMERA
	private OrthoCamera camera;
		
	//GRAPHICS
	private VertexArray vertexArray;
	private VertexArray textureVertexArray;
	private IndiceArray indiceArray;
	private int texture;
	private TextureShader2DProgram program;
	
	//MERCTIMER
	private MercTimer mercTimer = new MercTimer(6,ANIMATION_SPEED);
	
	
	//*****************CODE***********************
	public DragonHead(Context context, TextureShader2DProgram iProg){
		
		this.vertexArray = TextureMapVertexCreator.getHomeSquare(6,new Square(SIZE).getData());
		this.vertexArray.bindToBuffer();
		
		this.texture = TextureHandler.loadTexture(context, R.drawable.dragon_head);
		
		this.textureVertexArray = TextureMapVertexCreator.createTextureVertexArray(6, 1);
		this.textureVertexArray.bindToBuffer();
		
		this.indiceArray = TextureMapVertexCreator.getHomeSqareIndices((short)6);
		this.indiceArray.bindToBuffer();
		
		this.program = iProg;
		
		
		
	}
	
	public void setDirection(float nDir){
		direction = nDir;
	}
	
	public void setTarget(Vec2 nTarg){
		target = nTarg;
	}
	
	public boolean setTargeting(boolean nTarg){
		targeting = nTarg;
		return targeting;
	}
	
	public void updatePos(){
		
		if (targeting) {
			 if (position.getDirectionTo(target).getAngle() < direction){
				 direction -= TURN_SPEED;
			 }else if (position.getDirectionTo(target).getAngle() > direction){
				 direction += TURN_SPEED;
			 }
		}
		
		position.moveAngle(SPEED, direction);
				
	}

	@Override
	public void draw() {
		
		//Logger.loggerVerbose(TAG, "Binding camera");
		program.setuMatrix(camera.getCamera());
		
		//Logger.loggerVerbose(TAG, "Begging draw");
		glDrawElements(GL_TRIANGLES,TRIS_COUNT * 3,GL_UNSIGNED_SHORT, 0);
		
	}


	@Override
	public void bindData(OrthoCamera iCamera) {
		//Logger.loggerVerbose(TAG, "Begging bind data");
		
		program.useProgram();
		
		vertexArray.setActiveVBO(program.getPositionCoordinatesAttributeLocation(), TRIS_COUNT, POSITION_COMPONENT_COUNT * BYTES_PER_FLOAT, 0);
		textureVertexArray.setActiveVBO(program.getTextureCoordinatesAttributeLocation(), TRIS_COUNT, TEXTURE_COMPONENT_COUNT * BYTES_PER_FLOAT, mercTimer.getOffset() * (TRIS_COUNT * POSITION_COMPONENT_COUNT * BYTES_PER_FLOAT));
		
		indiceArray.setActiveIBO();
		
		this.camera = iCamera;
		
		program.setTextureId(texture);
		
	}
	
}


