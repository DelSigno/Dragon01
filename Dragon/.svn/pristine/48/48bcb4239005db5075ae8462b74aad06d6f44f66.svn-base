package com.dragon.android.objects;

import com.dragon.android.data.IndiceArray;
import com.dragon.android.data.Vec2;
import com.dragon.android.data.VertexArray;
import com.dragon.android.framework.OrthoCamera;
import com.dragon.android.objects.geometry.Rectangle;
import com.dragon.android.objects.geometry.Square;
import com.dragon.android.programs.ShaderProgram;
import com.dragon.android.programs.TextureShader2DProgram;
import com.dragon.android.util.TextureHandler;
import static android.opengl.GLES20.*;
import static android.opengl.Matrix.multiplyMM;
import static android.opengl.Matrix.setIdentityM;
import static android.opengl.Matrix.translateM;

import android.content.Context;
import android.view.View;

public class Background implements DrawCollection {

	private int texture;
	private TextureShader2DProgram program;
	
	//CONSTANTS
	private static final int BYTES_PER_FLOAT = 4;
	private static final int BYTES_PER_INT = 4;
	private static final int TRIS_COUNT = 2;
	private static final int POSITION_COMPONENT_COUNT = 2;
	private static final int TEXTURE_COMPONENT_COUNT = 2;
	
	
	//vertex and indice arrays
	private VertexArray vertexArray;
	private VertexArray textureArray = new Square(1).getVertexArray();
	//private final VertexArray indiceArray = new VertexArray(new int[]{1,2,3,1,3,4},true, GL_ELEMENT_ARRAY_BUFFER);
	private IndiceArray indiceArray = new IndiceArray(new int[]{1,2,3,1,3,4},true);
	
	public Background(Context context, View view, TextureShader2DProgram shaderProgram, int resourceId){
		texture = TextureHandler.loadTexture(context, resourceId);
		TextureHandler.setPrettySettings(texture);
		this.program = shaderProgram;
		
		//returns the vertices of a square
		vertexArray = new Rectangle(new Vec2(view.getWidth(),view.getHeight())).getVertexArray();
		vertexArray.bindToBuffer();
		
		//binds the texture array to a vbo
		textureArray.bindToBuffer();
			
	}
	
	//very expensive call. Dont use often. Change scale if possible
	public void setSize(Vec2 newSize){
		vertexArray = new Rectangle(newSize).getVertexArray();
	}
	
	@Override
	public void draw() {
		glDrawElements(GL_TRIANGLES,TRIS_COUNT * 3,GL_UNSIGNED_INT, null);

	}

	@Override
	public void bindData(OrthoCamera camera) {
		vertexArray.setActiveVBO(program.getPositionCoordinatesAttributeLocation(), TRIS_COUNT, POSITION_COMPONENT_COUNT * BYTES_PER_FLOAT, 0);
		vertexArray.setActiveVBO(program.getTextureCoordinatesAttributeLocation(), TRIS_COUNT, POSITION_COMPONENT_COUNT * BYTES_PER_FLOAT, 0);
		
		setIdentityM(modelMatrix, 0);
		translateM(modelMatrix, 0, x, y, z);
		multiplyMM(modelViewProjectionMatrix, 0, projectionMatrix, 0, modelMatrix, 0);
		program.setUniforms(MM, textureId)

	}

}
